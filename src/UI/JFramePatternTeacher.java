/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JFramePatternTeacher.java
 *
 * Created on 30-sept.-2009, 13:36:30
 */
package UI;

import java.sql.SQLException;
import pimpyteacher.*;
import dataModel.*;
import javax.swing.JOptionPane;
import java.util.regex.*;

/**
 *
 * @author Alain
 */
public class JFramePatternTeacher extends javax.swing.JFrame {

    private GraphicalPimpyController controller = null;
    private boolean newAnswerMode = false;
    private int patternId = -1;

    /** Creates new form JFramePatternTeacher */
    public JFramePatternTeacher(GraphicalPimpyController controller) {
        initComponents();
        this.controller = controller;
        this.fillList();
    }

    public void showTestedAnswer(String answer) {
        JOptionPane.showMessageDialog(this, answer, "Pattern test", JOptionPane.PLAIN_MESSAGE);
    }

    public void fillList() {
        try {
            // Fill list with existing patterns.
            SentencePattern[] patArray = controller.getAllPatterns();
            this.jListAnswers.setListData(patArray);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "SQL error occured :\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaPattern = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaAnswer = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaTest = new javax.swing.JTextArea();
        jButtonTest = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextAreaSessionVars = new javax.swing.JTextArea();
        jCheckBoxCase = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jButtonSaveNewAnswer = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPaneList = new javax.swing.JScrollPane();
        jListAnswers = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jButtonClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pattern Teacher");

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Pattern :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        jPanel5.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Answer :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel5.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Test :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel5.add(jLabel3, gridBagConstraints);

        jTextAreaPattern.setColumns(32);
        jTextAreaPattern.setLineWrap(true);
        jTextAreaPattern.setRows(3);
        jTextAreaPattern.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextAreaPatternKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(jTextAreaPattern);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(jScrollPane2, gridBagConstraints);

        jTextAreaAnswer.setColumns(32);
        jTextAreaAnswer.setLineWrap(true);
        jTextAreaAnswer.setRows(3);
        jScrollPane3.setViewportView(jTextAreaAnswer);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(jScrollPane3, gridBagConstraints);

        jTextAreaTest.setColumns(32);
        jTextAreaTest.setLineWrap(true);
        jTextAreaTest.setRows(3);
        jScrollPane4.setViewportView(jTextAreaTest);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(jScrollPane4, gridBagConstraints);

        jButtonTest.setText("Test");
        jButtonTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel5.add(jButtonTest, gridBagConstraints);

        jLabel4.setText("Session vars :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel5.add(jLabel4, gridBagConstraints);

        jTextAreaSessionVars.setColumns(32);
        jTextAreaSessionVars.setLineWrap(true);
        jTextAreaSessionVars.setRows(2);
        jScrollPane5.setViewportView(jTextAreaSessionVars);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(jScrollPane5, gridBagConstraints);

        jCheckBoxCase.setSelected(true);
        jCheckBoxCase.setText("Save as case insensitive");
        jCheckBoxCase.setToolTipText("Saves this pattern as not sensitive to case.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        jPanel5.add(jCheckBoxCase, gridBagConstraints);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        jButtonSave.setText("Save pattern and answer");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jPanel6.add(jButtonSave);

        jButtonSaveNewAnswer.setText("Save new answer");
        jButtonSaveNewAnswer.setEnabled(false);
        jButtonSaveNewAnswer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveNewAnswerActionPerformed(evt);
            }
        });
        jPanel6.add(jButtonSaveNewAnswer);

        jPanel3.add(jPanel6, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jListAnswers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListAnswers.setPreferredSize(new java.awt.Dimension(180, 80));
        jListAnswers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jListAnswersMouseReleased(evt);
            }
        });
        jListAnswers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListAnswersKeyReleased(evt);
            }
        });
        jScrollPaneList.setViewportView(jListAnswers);

        jPanel4.add(jScrollPaneList, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel4, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonClose);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jListAnswersMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListAnswersMouseReleased
        if (!this.jListAnswers.isSelectionEmpty()) {
            SentencePattern pat = (SentencePattern) this.jListAnswers.getSelectedValue();
            this.patternId = pat.getId();
            this.jCheckBoxCase.setSelected(pat.isCaseInsensitive());
            this.jTextAreaPattern.setText(pat.getRegex());
            this.newAnswerMode = true;
            this.jButtonSaveNewAnswer.setEnabled(true);
        }
    }//GEN-LAST:event_jListAnswersMouseReleased

    private void jListAnswersKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListAnswersKeyReleased
        this.jListAnswersMouseReleased(null);
    }//GEN-LAST:event_jListAnswersKeyReleased

    private void jTextAreaPatternKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaPatternKeyTyped
        if (this.newAnswerMode) {
            this.newAnswerMode = false;
            this.jListAnswers.clearSelection();
            this.jButtonSaveNewAnswer.setEnabled(false);
            this.patternId = -1;
            this.jCheckBoxCase.setSelected(true);
        }
    }//GEN-LAST:event_jTextAreaPatternKeyTyped

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        // This saves a new pattern/answer couple.
        String pat = this.jTextAreaPattern.getText();
        String answer = this.jTextAreaAnswer.getText();
        // In fact the controller should do this :
        if (pat.isEmpty() || answer.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Pattern or answer field is empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Let's save the new stuff.
        try {
            SentencePattern sp = new SentencePattern(pat);
            sp.setContextVars(this.jTextAreaSessionVars.getText());
            controller.learnNewPattern(sp, answer, this.jCheckBoxCase.isSelected());
            this.fillList();
        } catch (PatternSyntaxException ex) {
            // That regex is crap...
            JOptionPane.showMessageDialog(this, "The pattern regex won't compile because it has errors in it.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "SQL error occured :\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonSaveNewAnswerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveNewAnswerActionPerformed
        // Add answer to existing pattern.
        String answer = this.jTextAreaAnswer.getText();
        if (answer.isEmpty()) {
            JOptionPane.showMessageDialog(this, "The answer field is empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            controller.addAnswerToPattern(patternId, answer);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "SQL error occured :\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonSaveNewAnswerActionPerformed

    private void jButtonTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestActionPerformed
        // Test the pattern and format answer if matched.
        // This should be somewhere in the model...
        SentencePattern pattern = new SentencePattern(this.jTextAreaPattern.getText(), this.jCheckBoxCase.isSelected());
        try {
            pattern.compile();
            String answer = pattern.formatAnswer(this.jTextAreaTest.getText(), this.jTextAreaAnswer.getText());
            if (answer == null) {
                this.showTestedAnswer("Pattern did not match.");
            } else {
                this.showTestedAnswer(answer);
            }
        } catch (PatternSyntaxException ex) {
            JOptionPane.showMessageDialog(this, "The pattern regex won't compile because it has errors in it.\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
           JOptionPane.showMessageDialog(this, "Error :\n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonTestActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSaveNewAnswer;
    private javax.swing.JButton jButtonTest;
    private javax.swing.JCheckBox jCheckBoxCase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jListAnswers;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPaneList;
    private javax.swing.JTextArea jTextAreaAnswer;
    private javax.swing.JTextArea jTextAreaPattern;
    private javax.swing.JTextArea jTextAreaSessionVars;
    private javax.swing.JTextArea jTextAreaTest;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the newAnswerMode
     */
    public boolean isNewAnswerMode() {
        return newAnswerMode;
    }

    /**
     * @param newAnswerMode the newAnswerMode to set
     */
    public void setNewAnswerMode(boolean newAnswerMode) {
        this.newAnswerMode = newAnswerMode;
    }

    /**
     * @return the patternId
     */
    public int getPatternId() {
        return patternId;
    }

    /**
     * @param patternId the patternId to set
     */
    public void setPatternId(int patternId) {
        this.patternId = patternId;
    }

}
